version: '3.8'

services:
  # Frontend Service - Go application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/frontend:${TAG}
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - LISTEN_ADDR=0.0.0.0
      - PRODUCT_CATALOG_SERVICE_ADDR=productcatalogservice:3550
      - CURRENCY_SERVICE_ADDR=currencyservice:7000
      - CART_SERVICE_ADDR=cartservice:7070
      - RECOMMENDATION_SERVICE_ADDR=recommendationservice:8080
      - SHIPPING_SERVICE_ADDR=shippingservice:50051
      - CHECKOUT_SERVICE_ADDR=checkoutservice:5050
      - AD_SERVICE_ADDR=adservice:9555
      - PAYMENT_SERVICE_ADDR=paymentservice:8080
      - EMAIL_SERVICE_ADDR=emailservice:8080
      - SHOPPING_ASSISTANT_SERVICE_ADDR=shoppingassistantservice:8080
    depends_on:
      - productcatalogservice
      - currencyservice
      - cartservice
      - recommendationservice
      - shippingservice
      - checkoutservice
      - paymentservice
      - emailservice
      - redis
    networks:
      - microservices-network

  # Product Catalog Service - Go application
  productcatalogservice:
    build:
      context: ./productcatalogservice
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/productcatalogservice:${TAG}
    ports:
      - "3550:3550"
    environment:
      - PORT=3550
    networks:
      - microservices-network

  # Currency Service - Node.js application
  currencyservice:
    build:
      context: ./currencyservice
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/currencyservice:${TAG}
    ports:
      - "7000:7000"
    environment:
      - PORT=7000
      - DISABLE_PROFILER=1
    networks:
      - microservices-network

  # Redis Cache - Cart data storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - microservices-network

  # Cart Service - .NET application
  cartservice:
    build:
      context: ./cartservice/src
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/cartservice:${TAG}
    ports:
      - "7070:7070"
    environment:
      - ASPNETCORE_HTTP_PORTS=7070
      - ASPNETCORE_URLS=http://+:7070
      - REDIS_ADDR=redis:6379
    depends_on:
      - redis
    networks:
      - microservices-network

  # Recommendation Service - Python application
  recommendationservice:
    build:
      context: ./recommendationservice
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/recommendationservice:${TAG}
    ports:
      - "8081:8080"
    environment:
      - PORT=8080
      - PRODUCT_CATALOG_SERVICE_ADDR=productcatalogservice:3550
    depends_on:
      - productcatalogservice
    networks:
      - microservices-network

  # Shipping Service - Go application
  shippingservice:
    build:
      context: ./shippingservice
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/shippingservice:${TAG}
    ports:
      - "50051:50051"
    environment:
      - PORT=50051
    networks:
      - microservices-network

  # Checkout Service - Go application
  checkoutservice:
    build:
      context: ./checkoutservice
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/checkoutservice:${TAG}
    ports:
      - "5050:5050"
    environment:
      - PORT=5050
      - PRODUCT_CATALOG_SERVICE_ADDR=productcatalogservice:3550
      - CART_SERVICE_ADDR=cartservice:7070
      - CURRENCY_SERVICE_ADDR=currencyservice:7000
      - SHIPPING_SERVICE_ADDR=shippingservice:50051
      - EMAIL_SERVICE_ADDR=emailservice:8080
      - PAYMENT_SERVICE_ADDR=paymentservice:8080
    depends_on:
      - cartservice
      - currencyservice
      - shippingservice
      - emailservice
      - paymentservice
    networks:
      - microservices-network

  # Ad Service - Java application
  adservice:
    build:
      context: ./adservice
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/adservice:${TAG}
    ports:
      - "9555:9555"
    environment:
      - PORT=9555
    networks:
      - microservices-network
    profiles:
      - disabled

  # Payment Service - Node.js application
  paymentservice:
    build:
      context: ./paymentservice
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/paymentservice:${TAG}
    ports:
      - "8082:8080"
    environment:
      - PORT=8080
      - DISABLE_PROFILER=1
    networks:
      - microservices-network

  # Email Service - Python application
  emailservice:
    build:
      context: ./emailservice
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/emailservice:${TAG}
    ports:
      - "8083:8080"
    environment:
      - PORT=8080
    networks:
      - microservices-network

  # Shopping Assistant Service - Python application
  shoppingassistantservice:
    build:
      context: ./shoppingassistantservice
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/shoppingassistantservice:${TAG}
    ports:
      - "8084:8080"
    environment:
      - PORT=8080
    networks:
      - microservices-network
    profiles:
      - disabled

  # Load Generator - Python application (optional)
  loadgenerator:
    build:
      context: ./loadgenerator
      dockerfile: Dockerfile
    image: ${IMAGE_PREFIX}/loadgenerator:${TAG}
    environment:
      - FRONTEND_ADDR=frontend:8080
      - USERS=10
      - RATE=1
    depends_on:
      - frontend
    networks:
      - microservices-network
    profiles:
      - loadgen

networks:
  microservices-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
